let sourcePad;function handleDragStart(){sourcePad=this.parentElement,this.classList.add("moving")}function handleDragEnd(){this.classList.remove("moving"),TEMPLATE_EDITOR.querySelectorAll(".row").forEach(t=>{t.classList.remove("over")})}function handleDragEnter(){this.classList.add("over")}function handleDragEnterPad(){this.querySelector("div.row")}function handleDragLeave(){this.classList.remove("over")}function handleDragOver(t){return t.preventDefault(),!1}function cloneRow(t){const e=createBlankRow();var s=e.querySelector("div.row");const i=Object.create(ATTRIBUTE),r=new AttributeRow(t.querySelector("div.row")),a=(i.general_name=r.getName(),i.label=r.getLabel(),i.type_=r.getType(),i.description=r.getDescription(),i.ena_requirement=r.getEnaRequirementLevel(),i.ena_name=r.getEnaName(),i.ena_units=r.getEnaUnits(),i.gisaid_requirement=r.getGisaidRequirementLevel(),i.gisaid_name=r.getGisaidName(),i.gisaid_header=r.getGisaidHeader(),i.pattern=r.getPattern(),i.options=r.getOptions(),i.default=r.getDefault(),new AttributeRow(s));return a.setFromAttribute(i),e}function handleDrop(t){t.stopPropagation();const e=sourcePad.querySelector("div.row");if(e!==this){const s=cloneRow(this.parentElement),i=new AttributeRow(s.querySelector("div.row")),r=new AttributeRow(e);t=r.getIndex();r.setIndex(i.getIndex()),i.setIndex(t),e.classList.remove("moving"),console.log(sourcePad),TEMPLATE_EDITOR.replaceChild(sourcePad,this.parentElement),TEMPLATE_EDITOR.replaceChild(s,sourcePad)}}function handleDropPad(t){t.stopPropagation()}class DraggableCard extends HTMLElement{createdCallback(){this.innerHTML=`
        <style>
        .card {
            box-sizing: border-box;
            position: relative;
            width: 100%;
            padding: 30px;
            border-radius: 2px;
            box-shadow: 1px 1px 5px -1px rgba(0,0,0,.4);
            background: white;
            margin-bottom: 30px;
        }
        </style>
        <div class="card">${this.title}</div>
        `,this.onStart=this.onStart.bind(this),this.onMove=this.onMove.bind(this),this.onEnd=this.onEnd.bind(this),this.update=this.update.bind(this),this.target=null,this.startX=0,this.startY=0,this.currentX=0,this.currentY=0,this.screenX=0,this.screenY=0,this.finalX=0,this.finalY=0,this.draggingCard=!1,this.addEventListeners(),requestAnimationFrame(this.update)}attachedCallback(){this.querySelector(".card").innerHTML=this.dataset.title}set properties(t){this.title=t.text}addEventListeners(){this.addEventListener("touchstart",this.onStart),this.addEventListener("touchmove",this.onMove),this.addEventListener("touchend",this.onEnd),this.addEventListener("mousedown",this.onStart),this.addEventListener("mousemove",this.onMove),this.addEventListener("mouseup",this.onEnd)}onStart(t){t.target.classList.contains("card")?(this.target!==t.target&&this.target,this.target=t.target,this.target.style.willChange="transform",this.target.style.willChange="z-index",this.target.style.zIndex="999",console.log(this.target),this.draggingCard=!0,this.startX=t.pageX||t.touches[0].pageX,this.startY=t.pageY||t.touches[0].pageY,this.currentX=this.startX+this.finalX,this.currentY=this.startY+this.finalY,this.target.style.transform=`translate(${this.currentX}px, ${this.currentY}px)`,console.log(`Current ${this.currentX}, `+this.currentY)):this.target=null}onMove(t){this.target&&(this.target.classList.remove("unselected"),this.target.classList.add("selected"),t.preventDefault(),this.currentX=(t.pageX||t.touches[0].pageX)+this.finalX,this.currentY=(t.pageY||t.touches[0].pageY)+this.finalY)}onEnd(t){this.target,this.finalX=this.currentX-this.startX,this.finalY=this.currentY-this.startY,this.target.style.zIndex="0",console.log(this.target),this.draggingCard=!1}update(){requestAnimationFrame(this.update),this.target&&this.draggingCard&&(this.screenX=this.currentX-this.startX,this.screenY=this.currentY-this.startY,this.target.style.transform=`translate(${this.screenX}px, ${this.screenY}px)`)}}document.registerElement("draggable-card",DraggableCard);