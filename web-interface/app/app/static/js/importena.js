function string2XML(e){return(new window.DOMParser).parseFromString(e,"text/xml")}function fecthEnaXml(){return string2XML(rawXML)}function appendEnaInfo(e,t){const n=document.querySelector("#ena-info"),l=document.createElement("p");l.innerHTML=`<strong>${e}:</strong>`+t,n.appendChild(l)}function parseChecklistDescriptors(e){appendEnaInfo("Label",e.evaluate("/DESCRIPTOR/LABEL",e,null,XPathResult.STRING_TYPE,null).stringValue);var t=e.evaluate("/DESCRIPTOR/NAME",e,null,XPathResult.STRING_TYPE,null).stringValue,t=(appendEnaInfo("Name",t),e.evaluate("/DESCRIPTOR/DESCRIPTION",e,null,XPathResult.STRING_TYPE,null).stringValue),t=(appendEnaInfo("Description",t),e.evaluate("/DESCRIPTOR/AUTHORITY",e,null,XPathResult.STRING_TYPE,null).stringValue);appendEnaInfo("Authority",t)}function parseFieldGroup(e){const t=e.evaluate("/FIELD_GROUP/FIELD",e,null,XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,null);let n,l,a,r;for(let e=0;e<t.snapshotLength;e++)if(l=(n=t.snapshotItem(e)).querySelector(":scope > NAME").innerHTML,label=n.querySelector(":scope > LABEL").innerHTML,n.querySelector(":scope > MANDATORY").innerHTML,a=n.querySelector(":scope > DESCRIPTION").innerHTML,typeData=n.querySelector(":scope > FIELD_TYPE").children[0],(r=newAttributeRow()).querySelector(".name.column>input").value=l,r.querySelector(".label.column>input").value=label,r.querySelector(".description.column>input").value=a,console.log(typeData.tagName),"TEXT_FIELD"==typeData.tagName)changedType(r,"text");else{typeData.tagName="TEXT_CHOICE_FIELD";{let e=Array.from(typeData.querySelectorAll(":scope > TEXT_VALUE")).map(e=>e.querySelector("VALUE").innerHTML);r.querySelector(".options.column>input").value=e.toString(),changedType(r,"select")}}}function parseXmlChecklist(){var e="ERC000033";const t=fecthEnaXml();var n=`/CHECKLIST_SET/CHECKLIST[@checklistType='Sample' and @accession='${e}']`;if(t.evaluate(n+"/IDENTIFIERS/PRIMARY_ID",t,null,XPathResult.STRING_TYPE,null).stringValue==e){parseChecklistDescriptors(string2XML(t.evaluate(n+"/DESCRIPTOR",t,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue.outerHTML));const l=t.evaluate(n+"/DESCRIPTOR/FIELD_GROUP",t,null,XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,null);for(let e=0;e<l.snapshotLength;e++)parseFieldGroup(string2XML(l.snapshotItem(e).outerHTML))}else alert("Primary ID does not match the given checklist accession.")}parseXmlChecklist();