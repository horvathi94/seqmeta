FIELD_TYPES=["text","select","date","template"],REQUIREMENT_LEVELS=["exclude","optional","recommended","mandatory"];class RowHandle{constructor(e,t=0){this.row=e,this._index=t,this.countCells()||this.initCells()}get index(){return this._index}set index(e){this._index=e}initCells(){this.appendCell("rm"),this.fillCell("rm",[this.createRemoveButton()]),this.appendCell("general_name");var e=new AttrField({fname:"general_name",type:"text",index:this.index}),t=new AttrField({fname:"has_fixed_name",type:"boolean",index:this.index,isHidden:!0}),i=new AttrField({fname:"is_mandatory",type:"boolean",index:this.index,isHidden:!0}),e=(this.fillCell("general_name",[e,t,i]),this.appendCell("is_unique"),new AttrField({fname:"is_unique",type:"checkbox",index:this.index})),t=new AttrField({fname:"must_be_unique",type:"boolean",index:this.index,isHidden:!0}),i=(this.fillCell("is_unique",[e,t]),this.appendCell("label"),new AttrField({fname:"label",type:"text",index:this.index})),e=(this.fillCell("label",[i]),this.appendCell("type"),new AttrField({fname:"type_",type:"select",index:this.index,options:FIELD_TYPES,onchange:function(){const e=new RowHandle(this.closest("tr"));e.type=this.value}})),t=(this.fillCell("type",[e]),this.appendCell("gisaid"),new AttrField({fname:"gisaid_name",type:"text",index:this.index})),i=new AttrField({fname:"gisaid_requirement",type:"select",index:this.index,options:REQUIREMENT_LEVELS,onchange:()=>{this.refreshRequirement()}}),e=new AttrField({fname:"gisaid_header",type:"text",index:this.index}),t=(this.fillCell("gisaid",[t,i,e]),this.appendCell("ena"),new AttrField({fname:"ena_name",type:"text",index:this.index})),i=new AttrField({fname:"ena_requirement",type:"select",index:this.index,options:REQUIREMENT_LEVELS,onchange:()=>{this.refreshRequirement()}}),e=new AttrField({fname:"ena_units",type:"text",index:this.index}),t=(this.fillCell("ena",[t,i,e]),this.appendCell("parameters"),this.createParametersField()),i=(this.fillCell("parameters",[t]),this.appendCell("default"),this.createDefaultField()),e=(this.fillCell("default",[i]),this.appendCell("description"),new AttrField({fname:"description",type:"textarea",index:this.index,placeholder:"Short description about the field."}));this.fillCell("description",[e])}countCells(){return parseInt(this.row.querySelectorAll("td").length)}addClass(e){this.row.classList.add(e)}appendCell(e){const t=this.row.insertCell();return t.dataset.cellName=e,t}getCell(e){return this.row.querySelector(`td[data-cell-name=${e}]`)}clearCell(e){const t=this.getCell(e);t.innerHTML=""}fillCell(e,t=[]){const i=this.getCell(e);t.forEach(e=>{i.appendChild(e)})}selectField(e,t){return this.getCell(e).querySelector(`attr-field[data-field-name='${t}']`)}get isMandatory(){return this.selectField("general_name","is_mandatory").value}set isMandatory(e){this.selectField("general_name","is_mandatory").value=e,this.refreshRequirement()}set mustBeUnique(e){(this.selectField("is_unique","must_be_unique").value=e)&&(this.isUnique=!0,this.selectField("is_unique","is_unique").lock())}set hasFixedName(e){(this.selectField("general_name","has_fixed_name").value=e)&&this.selectField("general_name","general_name").lock()}get generalName(){return this.selectField("general_name","general_name").value}set generalName(e){this.selectField("general_name","general_name").value=e}set label(e){this.selectField("label","label").value=e}set gisaidName(e){this.selectField("gisaid","gisaid_name").value=e}set gisaidHeader(e){this.selectField("gisaid","gisaid_header").value=e}set enaName(e){this.selectField("ena","ena_name").value=e}set enaUnits(e){this.selectField("ena","ena_units").value=e}set description(e){this.selectField("description","description").value=e}set isUnique(e){this.selectField("is_unique","is_unique").checked(e)}get type(){return this.selectField("type","type_").value}set type(e){this.selectField("type","type_").value=e,this.refreshParametersCell(),this.refreshDefaultCell()}get parameters(){switch(this.type){case"text":return this.selectField("parameters","pattern").value;case"select":return this.selectField("parameters","options").value.split(",");case"template":return this.selectField("parameters","template").value;default:return}}set pattern(e){"text"==this.type&&(this.selectField("parameters","pattern").value=e,this.refreshDefaultCell())}set options(e){"select"==this.type&&(Array.isArray(e)&&(e=e.join(",")),this.selectField("parameters","options").value=e,this.refreshDefaultCell())}set template(e){"template"==this.type&&(this.selectField("parameters","template").value=e,this.refreshDefaultCell())}get enaRequirement(){return this.selectField("ena","ena_requirement").value}set enaRequirement(e){this.selectField("ena","ena_requirement").value=e;this.refreshRequirement()}get gisaidRequirement(){return this.selectField("gisaid","gisaid_requirement").value}set gisaidRequirement(e){this.selectField("gisaid","gisaid_requirement").value=e;this.refreshRequirement()}get requirement(){if(this.isMandatory)return"mandatory";const e=[this.enaRequirement,this.gisaidRequirement];for(const t of REQUIREMENT_LEVELS.slice().reverse())if(e.includes(t))return t;return"exclude"}createRemoveButton(){const e=document.createElement("input");return e.type="button",e.classList.add("rm"),e.value="❌",e.onclick=()=>{this.row.remove()},e}enableRemove(){this.getCell("rm").querySelector(".rm").disabled=!1}disableRemove(){this.getCell("rm").querySelector(".rm").disabled=!0}refreshRequirement(){switch(this.requirement){case"mandatory":this.disableRemove();break;case"recommended":case"optional":case"exclude":this.enableRemove()}}createParametersField(){const e={index:this.index};switch(this.type){case"text":e.fname="pattern",e.type="text",e.placeholder="Regex for input.";break;case"select":e.fname="options",e.type="textarea",e.placeholder="Comma separated list of options.";break;case"template":e.fname="template",e.type="text",e.placeholder="Template for input.";break;case"date":e.fname="junk",e.type="junk",e.placeholder="N/A";break;default:return void console.log("Failed to create paramters cell.")}return e.onchange=function(){const e=new RowHandle(this.closest("tr"));e.parameters=this.value},new AttrField(e)}refreshParametersCell(){this.clearCell("parameters"),this.fillCell("parameters",[this.createParametersField()])}createDefaultField(){const e={fname:"default",index:this.index};switch(this.type){case"text":e.type="text",e.placeholder="Default value.";break;case"select":e.type="select",e.options=this.parameters;break;case"template":e.type="junk";break;case"date":e.type="date";break;default:return void console.log("Failed to create paramters cell.")}return new AttrField(e)}refreshDefaultCell(){this.clearCell("default"),this.fillCell("default",[this.createDefaultField()])}fillFromField(e){this.generalName=e.general_name,this.hasFixedName=e.has_fixed_name,this.type=e.type_,this.isUnique=e.is_unique,this.mustBeUnique=e.must_be_unique,this.label=e.label,this.description=e.description,this.gisaidName=e.gisaid_name,this.gisaidRequirement=e.gisaid_requirement,this.gisaidHeader=e.gisaid_header,this.enaName=e.ena_name,this.enaRequirement=e.ena_requirement,this.enaUnits=e.ena_units,this.isMandatory=e.is_mandatory,this.pattern=e.pattern,this.options=e.options,this.template=e.template}}class TemplateEditor{constructor(){this.editor=document.querySelector("#template-editor"),this.attributeEditor=this.editor.querySelector("#attribute-editor > tbody"),this.taxonomyEditor=this.editor.querySelector(".mini-editor#taxonomy"),this.subFilesEditor=this.editor.querySelector(".mini-editor#files-check"),this.checklistEditor=this.editor.querySelector(".mini-editor#ena-import")}countRows(){return parseInt(this.attributeEditor.querySelectorAll("tr").length)}appendAttributeRow(){var e=this.attributeEditor.insertRow();const t=new RowHandle(e,this.countRows());return t.addClass("row"),t}removeAttributeRow(t){this.attributeEditor.querySelectorAll("tr.row").forEach(e=>{new RowHandle(e).generalName==t&&e.remove()})}fillAttributesFromFields(e){0!=e.length&&(e.forEach(e=>{const t=this.appendAttributeRow();t.fillFromField(e)}),this.hideClearButton())}set templateName(e){this.editor.querySelector("#template-name-field").value=e}set description(e){this.editor.querySelector("#template-description-field").value=e}lockEnaChecklist(){this.checklistEditor.querySelector("#ena-checklist").readOnly=!0,this.checklistEditor.querySelector("#ena-checklist").style.color="grey",this.checklistEditor.querySelector("#fetch-ena-button").disabled=!0}set enaChecklist(e){(this.checklistEditor.querySelector("#ena-checklist").value=e)&&this.lockEnaChecklist()}set taxonomyId(e){this.taxonomyEditor.querySelector("#taxonomy-id").value=e}set scientificName(e){this.taxonomyEditor.querySelector("#scientific-name").value=e}set commonName(e){this.taxonomyEditor.querySelector("#common-name").value=e}hideChecklist(){this.checklistEditor.classList.add("invisible")}showChecklist(){this.checklistEditor.classList.remove("invisible")}checkSubmissionFileField(e,t){this.subFilesEditor.querySelector(`input[type='checkbox'][data-ftype='${t}'][data-repo='${e}']`).checked=!0}switchSubmissionFiles(i){var e="/templates/attributes?for="+i.dataset.submission;"ena"==i.dataset.repo&&(i.checked?this.showChecklist():this.hideChecklist()),fetch(e).then(e=>e.json()).then(e=>{e.forEach(e=>{if(i.checked){const t=this.appendAttributeRow();t.fillFromField(e)}else this.removeAttributeRow(e.general_name)})})}setSubmissionFiles(e){e.gisaid_assembly&&this.checkSubmissionFileField("gisaid","assembly"),e.ena_reads&&(this.checkSubmissionFileField("ena","read"),this.showChecklist())}fillFromTemplate(e){this.templateName=e.name,this.description=e.description,this.enaChecklist=e.ena_checklist,this.taxonomyId=e.taxonomy.taxonomy_id,this.scientificName=e.taxonomy.scientific_name,this.commonName=e.taxonomy.common_name,this.setSubmissionFiles(e),this.fillAttributesFromFields(e.fields)}hideClearButton(){this.editor.querySelector("#clear-attributes").classList.add("invisible")}showClearButton(){this.editor.querySelector("#clear-attributes").classList.remove("invisible")}}const TEMPLATE_EDITOR=new TemplateEditor;$(document).ready(function(){$("#attribute-editor tbody").sortable()}),TEMPLATE_NAME?fetch("/templates/json?name="+TEMPLATE_NAME).then(e=>e.json()).then(e=>{TEMPLATE_EDITOR.fillFromTemplate(e)}):fetch("/templates/attributes?for=basic").then(e=>e.json()).then(e=>{e.forEach(e=>{const t=TEMPLATE_EDITOR.appendAttributeRow();t.fillFromField(e)})});