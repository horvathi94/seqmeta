const TEMPLATE_EDITOR=document.querySelector("#template-editor"),FIELD_TYPES=["text","select","date","template","file"];class AttrCell extends HTMLElement{constructor(){super(),this.inpfields=[],this.index=0}set fields(e){this.inpfields=Array.from(e)}get fields(){return this.inpfields}addFields(){this.fields.forEach(e=>{this.appendChild(e)})}set index(l){this.fields.forEach(e=>{let t=e.name.split("+");t[1]=l,e.name=t.join("+")})}static create(e,t){const l=document.createElement("attr-cell");return l.fields=t,l.addFields(),l}fetchField(t){let l=null;return this.fields.forEach(e=>{e.name.split("+")[2]==t&&(l=e)}),l}getValue(e){e=this.fetchField(e);if(null!==e)return e.value}setValue(e,t){const l=this.fetchField(e);null!==l&&(l.value=t)}clear(){this.fields.forEach(e=>e.remove())}}class AttrRow extends HTMLElement{constructor(){super(),this.cells={},0==this.children.length&&this.initCells()}initCells(){this.cells.removeCell=this.createRemoveCell(),this.cells.generalNameCell=this.createGeneralNameCell(),this.cells.labelCell=this.createLabelCell(),this.cells.typeCell=this.createTypeCell(),this.cells.paramsCell=this.createParamsCell()}createRemoveCell(){const e=document.createElement("input"),t=(e.type="button",e.classList.add("rmbutton"),e.value="X",e.onclick=function(){this.closest("padded-row").remove()},AttrCell.create("remove",[e]));return t.classList.add("remove"),t}genName(e){return`attr+${this.index}+`+e}createGeneralNameCell(){var e=new TextField(this.genName("general_name"));return AttrCell.create("general_name",[e.input])}createLabelCell(){var e=new TextField(this.genName("label"));return AttrCell.create("label",[e.input])}createTypeCell(){const e=new SelectField(this.genName("type_"),FIELD_TYPES);return e.input.onchange=function(){this.closest("attr-row").type=this.value},AttrCell.create("type_",[e.input])}createParamsCell(){let e;switch(this.type){case"text":(e=new TextField(this.genName("pattern"))).input.placeholder="Regex for input.";break;case"select":(e=new TextAreaField(this.genName("options"))).input.placeholder="Comma separated list of options.";default:return}return AttrCell.create("params",[e.input])}connectedCallback(){Object.values(this.cells).forEach(e=>{this.appendChild(e)})}set index(t){this.dataset.index=t,Object.values(this.cells).forEach(e=>{e.index=t})}get index(){return this.dataset.index}replaceParamsCell(){this.cells.paramsCell.clear();var e=this.createParamsCell();console.log(e),this.cells.paramsCell.addFields(e.fields)}set type(e){this.cells.typeCell.setValue("type_",e),this.replaceParamsCell(),console.log("Setting type: ",this.cells.typeCell.getValue("type_"))}get type(){return this.cells.typeCell.getValue("type_")}}class PaddedRow extends HTMLElement{constructor(){super(),this.row=this.querySelector("attr-row"),this.row||(this.row=document.createElement("attr-row"))}connectedCallback(){0==this.children.length&&this.appendChild(this.row)}set index(e){this.row.index=e}get index(){return this.row.index}}customElements.define("attr-cell",AttrCell),customElements.define("attr-row",AttrRow),customElements.define("padded-row",PaddedRow);const editor=TEMPLATE_EDITOR;let paddedRow=document.createElement("padded-row");paddedRow.index=1,editor.appendChild(paddedRow),(paddedRow=document.createElement("padded-row")).index=200,editor.appendChild(paddedRow);