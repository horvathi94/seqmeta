class TemplateEditor extends HTMLElement{get attrEditor(){return this.querySelector("#attr-editor")}get taxonomyEditor(){return this.querySelector(".mini-editor#taxonomy")}get checklistEditor(){return this.querySelector(".mini-editor#ena-import")}get nameEditor(){return this.querySelector(".mini-editor#name")}get subFilesEditor(){return this.querySelector(".mini-editor#files-check")}createSpacer(){const a=document.createElement("div");return a.classList.add("spacer"),a.ondragover=function(a){return a.preventDefault(),!1},a.ondrop=function(a){a.stopPropagation();const b=dragSource.nextSibling;return this.parentElement.insertBefore(dragSource,this.nextSibling),this.parentElement.insertBefore(b,dragSource.nextSibling),dragSource.clearDragClasses(),TEMPLATE_EDITOR.renumberRows(),!1},a}appendBlankRow(){const a=document.createElement("editor-row");return a.index=this.querySelectorAll("editor-row.attr").length+1,a.classList.add("attr"),this.attrEditor.appendChild(a),this.attrEditor.appendChild(this.createSpacer()),a}renumberRows(){this.attrEditor.querySelectorAll("editor-row.attr").forEach((a,b)=>{a.index=b+1})}set taxonomyId(a){this.taxonomyEditor.querySelector("#taxonomy-id").value=a}set scientificName(a){this.taxonomyEditor.querySelector("#scientific-name").value=a}set commonName(a){this.taxonomyEditor.querySelector("#common-name").value=a}set name(a){this.nameEditor.querySelector("#template-name-field").value=a}set description(a){this.nameEditor.querySelector("#template-description-field").value=a}set enaChecklist(a){this.checklistEditor.querySelector("#ena-checklist").value=a}lockName(a){this.name=a;const b=new HiddenField("template_name");this.nameEditor.querySelector("#template-name-field").disabled=!0,b.setValue(a),this.nameEditor.appendChild(b.input)}lockEnaChecklist(a){this.enaChecklist=a,this.checklistEditor.querySelector("#ena-checklist").disabled=!0,this.checklistEditor.querySelector("#fetch-ena-button").disabled=!0;const b=new HiddenField("ena_checklist+0+ena_checklist");b.setValue(a),this.checklistEditor.appendChild(b.input)}setSubmissionFiles(a){a.forEach(a=>{a.is_active&&a.repos.forEach(b=>{const c=this.subFilesEditor.querySelector(`input[type='checkbox'][data-ftype='${a.filetype}'][data-repo='${b}']`);c.checked=!0})})}fillFromTemplate(a){this.lockName(a.name),this.taxonomyId=a.taxonomy.taxonomy_id,this.scientificName=a.taxonomy.scientific_name,this.commonName=a.taxonomy.common_name,this.description=a.short_description,a.ena_checklist&&this.lockEnaChecklist(a.ena_checklist),this.setSubmissionFiles(a.files),a.attributes.forEach(a=>{if(!a.is_fixed){let b=this.appendBlankRow();b.setFromAttribute(a)}})}deleteRow(a){this.attrEditor.querySelectorAll("editor-row.attr").forEach(b=>{if(b.generalName==a)return b.nextSibling.remove(),void b.remove()})}clear(){this.attrEditor.querySelectorAll("editor-row.attr").forEach(a=>{this.deleteRow(a.generalName)})}addAttribute(a){const b=this.appendBlankRow();b.setFromAttribute(a)}switchUploadFiles(a){let b="/templates/attributes?for=";"gisaid"==a.dataset.repo&&"assembly"==a.dataset.ftype?b+="gisaid_assembly":"ena"==a.dataset.repo&&"read"==a.dataset.ftype&&(b+="ena_read"),fetch(b).then(a=>a.json()).then(b=>{b.forEach(b=>{a.checked?this.addAttribute(b):this.deleteRow(b.general_name)})})}}customElements.define("template-editor",TemplateEditor),TEMPLATE_NAME?fetch(`/templates/json?name=${TEMPLATE_NAME}`).then(a=>a.json()).then(a=>{TEMPLATE_EDITOR.fillFromTemplate(a)}):fetch("/templates/attributes?for=basic").then(a=>a.json()).then(a=>{a.forEach(a=>{TEMPLATE_EDITOR.addAttribute(a)})});